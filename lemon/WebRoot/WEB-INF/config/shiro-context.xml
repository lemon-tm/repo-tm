<?xml version="1.0" encoding="UTF-8"?>  

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-3.2.xsd"
	default-lazy-init="true">
	<!--
		安全认证过滤器
		Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
		Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持
		改配置中的id必须与web.xml中的shiro filter 的name一致
	 -->
	 
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login.jspx" />
		<!-- 登录成功后要跳转的连接 -->
		<!-- 不必设定successUrl,避免forward方式跳转，无法显示 数据，在Controller中直接redirect，可解决此问题-->
		<!-- <property name="successUrl" value="/" /> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <property name="unauthorizedUrl" value="/"></property> 
		
		<property name="filters">
			<util:map>
				<entry key="user" value-ref="userFilter" />
		<!-- ①对应
				<entry key="logout" value-ref="logoutFilter" />
		-->
			</util:map>
		</property>
		
		<!--anon匿名 authc登录认证  user用户已登录 logout退出filter-->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的“这里取到的是/lemon” -->
		<!-- 第一个优先，后面的永远不会匹配 -->
		<property name="filterChainDefinitions">
			<value>
				*.jspx = user
				<!-- /login.jspx = authc
				/logout.jspx = logout
				/member/** = user -->
			</value>
		</property>
	</bean>
	<!-- 
	<bean id="adminUrlBean" class="com.lemon.filter.LemonAdminUrl">
		<property name="adminLogin" value="/jeeadmin/jeecms/login.do"/>
		<property name="adminPrefix" value="/jeeadmin/jeecms/"/>
	</bean>
	parent="adminUrlBean"
	 -->
	
	<bean id="userFilter" class="com.lemon.filter.LemonUserFilter" />
	<!-- ①
	<bean id="logoutFilter" class="com.jeecms.core.security.CmsLogoutFilter" parent="adminUrlBean"/>
	 -->
	<!-- 定义 Shiro 主要业务对象  安全管理器-->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		
		<property name="realm" ref="authorizingRealm" /> 
		
		<!-- 缓存 本项目在spring配置了 ehcache缓存 -->
		<!-- <property name="cacheManager" ref="shiroEhcacheManager"/> -->
	</bean>
	<!-- 授权和认证 -->
	<bean id="authorizingRealm" class="com.lemon.filter.LemonAuthorizingRealm">
		<property name="credentialsMatcher">
           <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
               <property name="hashAlgorithmName" value="MD5"/>
              <!--  true means hex encoded, false means base64 encoded -->
               <property name="storedCredentialsHexEncoded" value="true"/>
               <!-- 迭代次数 -->
               <property name="hashIterations" value="1" />
           </bean>
        </property> 
		<!-- <property name="lemonUserService" ref="lemonUserService" /> -->
	</bean>

	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile">
			<value>classpath:ehcache-shiro.xml</value>
		</property>
	</bean> 

	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<!-- 
	
	Shiro生命周期处理器 。
	
	配置Bean也叫后置处理器，会自动的调用和Spring整合后各个组件的生命周期方法。
	
	注：基于它才能配置shiro的注解
	-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	
	
</beans>